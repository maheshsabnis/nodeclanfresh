// 1. load required modules
const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const { Sequelize, Model, DataTypes } = require('sequelize');
let instance = express();
instance.use(bodyParser.json());
instance.use(bodyParser.urlencoded({ extended: false }));
instance.use(cors())


// 2. define the Database Connection
const sequelize = new Sequelize("company", "root", "P@ssw0rd_", {
    host: 'localhost',
    dialect: 'mysql',
    pool: {
        max: 5,
        min: 0,
        idle: 10000
    },
    define: {
        timestamps: false // supressing the TimeStamp generated by ORM
    }
});

// 3. importing the package
var dept = sequelize.import('./../models/department.js');


// 4. sync the model with the database using sequelize

instance.get('/api/departments', (req, resp) => {
    let id = parseInt(req.params.id);
    sequelize.sync({
            force: false // default is true to create a table
        })
        .then(() =>
            dept.findAll()
        )
        .then((data) => {
            resp.json({ stausCode: 200, rowCount: data.length, response: data });
            resp.end();
        })
        .catch((error) => resp.send({ statusCode: 500, data: error }));
});


instance.get('/api/departments/:id', (req, resp) => {
    let id = parseInt(req.params.id);
    sequelize.sync({
            force: false // default is true to create a table
        })
        .then(() =>
            dept.findOne({ where: { DeptId: id } })
        )
        .then((data) => {
            resp.json({ statusCode: 200, data: data })
            resp.end();
        })
        .catch((error) => resp.send({ statusCode: 500, data: error }));
});

instance.post('/api/departments', (req, resp) => {
    let dept1 = {
        DeptId: parseInt(req.body.DeptId),
        DeptNo: req.body.DeptNo,
        DeptName: req.body.DeptName,
        Location: req.body.Location,
        Capacity: parseInt(req.body.Capacity),
    };
    console.log(JSON.stringify(dept));
    sequelize.sync({
            force: false // default is true to create a table
        })
        .then(() => {
            return dept.create(dept1);
        })
        .then((data) => {
            resp.json({ statusCode: 200, data: data.toJSON() })
            resp.end();
        })
        .catch((error) => resp.send({ statusCode: 500, data: error }));
});

instance.put('/api/departments/:id', (req, resp) => {
    let id = req.params.id;
    sequelize.sync({
            force: false // default is true to create a table
        })
        .then(() =>
            dept.update({
                DeptNo: req.body.DeptNo,
                DeptName: req.body.DeptName,
                Location: req.body.Location,
                Capacity: parseInt(req.body.Capacity)
            }, { where: { DeptId: id } })
        )
        .then((response) => {
            if (response.length === 0) {
                resp.json({ data: 'The record is not updated ' });
            } else {
                resp.json({ data: response });
            }
        })
        .catch((error) => resp.send({ statusCode: 500, data: `Error in Update ${error}` }));
});


instance.delete('/api/departments/:id', (req, resp) => {
    let id = req.params.id;
    sequelize.sync({
            force: false // default is true to create a table
        })
        .then(() =>
            dept.destroy({ where: { DeptId: 105 } })
        )
        .then((response) => {
            if (response.length === 0) {
                resp.json({ data: 'The record not found since cannot not be deleted ' });
            } else {
                resp.json({ data: response });
            }
        })
        .catch((error) => resp.send({ statusCode: 500, data: `Error in Delete ${error}` }));
});


// 4. listen on the port
instance.listen(5060, () => {
    console.log('Express Server Started on port 5060');
});